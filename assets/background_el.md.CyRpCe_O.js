import{_ as a,C as s,c as r,o,j as t,a2 as g,a as e,G as n}from"./chunks/framework.Dm7eAID-.js";const L=JSON.parse('{"title":"式言語","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"式言語"}],["meta",{"name":"og:url","content":"/uroborosql-doc_v0.x/background/el.html"}]]},"headers":[],"relativePath":"background/el.md","filePath":"background/el.md"}'),d={name:"background/el.md"},p={tabindex:"0"},u={style:{"text-align":"left"}},h={style:{"text-align":"left"}},f={style:{"text-align":"left"}};function x(S,l,y,b,m,k){const i=s("Badge");return o(),r("div",null,[l[31]||(l[31]=t("h1",{id:"式言語",tabindex:"-1"},[e("式言語 "),t("a",{class:"header-anchor",href:"#式言語","aria-label":'Permalink to "式言語"'},"​")],-1)),l[32]||(l[32]=t("p",null,[t("strong",null,"uroboroSQL"),e("では、条件分岐に式言語を利用することができます。"),t("br"),e(" 利用可能な式言語は以下の２つになります。")],-1)),t("ul",null,[l[2]||(l[2]=t("li",null,[t("a",{href:"https://github.com/jkuhnert/ognl",target:"_blank",rel:"noreferrer"},"OGNL")],-1)),t("li",null,[l[0]||(l[0]=t("a",{href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions",target:"_blank",rel:"noreferrer"},"Spring Expression Language(SpEL)",-1)),l[1]||(l[1]=e()),n(i,{text:"0.18.0+"})])]),l[33]||(l[33]=g(`<p>利用する式言語の切替は依存関係ライブラリの指定により行ってください。<br> 依存関係ライブラリの指定については<a href="./../getting_started/#ビルドツールの設定">環境設定</a>を参照してください。</p><p>条件分岐の評価式として使用する場合、評価結果が真偽値(true/false)になるように記述してください。</p><h2 id="ognl" tabindex="-1">OGNL <a class="header-anchor" href="#ognl" aria-label="Permalink to &quot;OGNL&quot;">​</a></h2><p>以下に式言語としてOGNLを利用する場合の基本文法を提示します。<br> OGNL文法の詳細は<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noreferrer">こちら</a>を参照してください。</p><h3 id="リテラル-ognl" tabindex="-1">リテラル(OGNL) <a class="header-anchor" href="#リテラル-ognl" aria-label="Permalink to &quot;リテラル(OGNL)&quot;">​</a></h3><p>以下のリテラルが使用できます。</p><ul><li>“a”(java.lang.String)</li><li>&#39;a&#39;(char)</li><li>1(int)</li><li>1L(long)</li><li>0.1F(float)</li><li>0.1D(double)</li><li>0.1B(java.math.BigDecimal)</li><li>1H(java.math.BigInteger)</li><li>true, false(Boolean)</li><li>null</li></ul><h3 id="演算子-ognl" tabindex="-1">演算子(OGNL) <a class="header-anchor" href="#演算子-ognl" aria-label="Permalink to &quot;演算子(OGNL)&quot;">​</a></h3><p>以下の演算子が使用できます。</p><h3 id="算術演算子-ognl" tabindex="-1">算術演算子(OGNL) <a class="header-anchor" href="#算術演算子-ognl" aria-label="Permalink to &quot;算術演算子(OGNL)&quot;">​</a></h3><ul><li>e1 + e2 (足し算)</li><li>e1 - e2 (引き算)</li><li>e1 * e2 (掛け算)</li><li>e1 / e2 (割り算)</li><li>e1 % e2 (余り)</li></ul><h3 id="比較演算子-ognl" tabindex="-1">比較演算子(OGNL) <a class="header-anchor" href="#比較演算子-ognl" aria-label="Permalink to &quot;比較演算子(OGNL)&quot;">​</a></h3><ul><li>e1 eq e2, e1 == e2 (等しい) <ul><li>e1・e2のいずれかがnullの場合、両方ともnullの時のみe1とe2は等しい</li><li>e1・e2が同じオブジェクトの場合、またはequals()メソッドにより等しいと判断される場合、e1とe2は等しい</li><li>e1・e2が数値の場合、倍精度浮動小数点数が等しい時のみe1とe2は等しい</li><li>その以外の場合、e1とe2は等しくない</li></ul></li><li>e1 neq e2, e1 != e2 (等しくない)</li><li>e1 lt e2, e1 &lt; e2 (小なり)</li><li>e1 lte e2, e1 &lt;= e2 (小なりイコール)</li><li>e1 gt e2, e1 &gt; e2 (大なり)</li><li>e1 gte e2, e1 &gt;= e2 (大なりイコール)</li></ul><h3 id="論理演算子-ognl" tabindex="-1">論理演算子(OGNL) <a class="header-anchor" href="#論理演算子-ognl" aria-label="Permalink to &quot;論理演算子(OGNL)&quot;">​</a></h3><ul><li>e1 or e2, e1 || e2 (論理和)</li><li>e1 and e2, e1 &amp;&amp; e2 (論理積)</li><li>not e, ! e (論理否定)</li></ul><h3 id="連結演算子-ognl" tabindex="-1">連結演算子(OGNL) <a class="header-anchor" href="#連結演算子-ognl" aria-label="Permalink to &quot;連結演算子(OGNL)&quot;">​</a></h3><ul><li>e1 + e2 (文字列連結)</li></ul><h3 id="メソッド・フィールドの呼び出し-ognl" tabindex="-1">メソッド・フィールドの呼び出し(OGNL) <a class="header-anchor" href="#メソッド・フィールドの呼び出し-ognl" aria-label="Permalink to &quot;メソッド・フィールドの呼び出し(OGNL)&quot;">​</a></h3><p>以下のようにメソッド・フィールドの呼び出しができます。</p><ul><li>e.method(args) (メソッドの呼び出し)</li><li>e.property (フィールドの呼び出し)</li></ul><h2 id="spring-expression-language-spel" tabindex="-1">Spring Expression Language(SpEL) <a class="header-anchor" href="#spring-expression-language-spel" aria-label="Permalink to &quot;Spring Expression Language(SpEL)&quot;">​</a></h2><p>以下に式言語としてSpring Expression Language(SpEL)を利用する場合の基本文法を提示します。<br> SpEL文法の詳細は<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref" target="_blank" rel="noreferrer">こちら</a>を参照してください。</p><h3 id="リテラル-spel" tabindex="-1">リテラル(SpEL) <a class="header-anchor" href="#リテラル-spel" aria-label="Permalink to &quot;リテラル(SpEL)&quot;">​</a></h3><p>以下のリテラルが使用できます。</p><ul><li>文字列はシングルクォートで囲む。シングルクォート自体を使用する場合はシングルクォートを２つ重ねる(&#39;&#39;)</li><li>数字や真偽値、nullはそのまま記述</li></ul><h3 id="演算子-spel" tabindex="-1">演算子(SpEL) <a class="header-anchor" href="#演算子-spel" aria-label="Permalink to &quot;演算子(SpEL)&quot;">​</a></h3><p>以下の演算子が使用できます。</p><h3 id="算術演算子-spel" tabindex="-1">算術演算子(SpEL) <a class="header-anchor" href="#算術演算子-spel" aria-label="Permalink to &quot;算術演算子(SpEL)&quot;">​</a></h3><ul><li>e1 + e2 (足し算)</li><li>e1 - e2 (引き算)</li><li>e1 * e2 (掛け算)</li><li>e1 / e2, e1 div e2 (割り算)</li><li>e1 % e2, e1 mod e2 (余り)</li></ul><h3 id="比較演算子-spel" tabindex="-1">比較演算子(SpEL) <a class="header-anchor" href="#比較演算子-spel" aria-label="Permalink to &quot;比較演算子(SpEL)&quot;">​</a></h3><ul><li>e1 eq e2, e1 == e2 (等しい) <ul><li>e1・e2のいずれかがnullの場合、両方ともnullの時のみe1とe2は等しい</li><li>e1・e2が同じオブジェクトの場合、またはequals()メソッドにより等しいと判断される場合、e1とe2は等しい</li><li>e1・e2が数値の場合、倍精度浮動小数点数が等しい時のみe1とe2は等しい</li><li>その以外の場合、e1とe2は等しくない</li></ul></li><li>e1 ne e2, e1 != e2 (等しくない)</li><li>e1 lt e2, e1 &lt; e2 (小なり)</li><li>e1 le e2, e1 &lt;= e2 (小なりイコール)</li><li>e1 gt e2, e1 &gt; e2 (大なり)</li><li>e1 ge e2, e1 &gt;= e2 (大なりイコール)</li></ul><h3 id="論理演算子-spel" tabindex="-1">論理演算子(SpEL) <a class="header-anchor" href="#論理演算子-spel" aria-label="Permalink to &quot;論理演算子(SpEL)&quot;">​</a></h3><ul><li>e1 or e2 (論理和)</li><li>e1 and e2 (論理積)</li><li>not e, ! e (論理否定)</li></ul><h3 id="連結演算子-spel" tabindex="-1">連結演算子(SpEL) <a class="header-anchor" href="#連結演算子-spel" aria-label="Permalink to &quot;連結演算子(SpEL)&quot;">​</a></h3><ul><li>e1 + e2 (文字列連結)</li></ul><h3 id="その他の演算子-spel" tabindex="-1">その他の演算子(SpEL) <a class="header-anchor" href="#その他の演算子-spel" aria-label="Permalink to &quot;その他の演算子(SpEL)&quot;">​</a></h3><ul><li>instanceof (型判定) <ul><li>ex) &#39;xyz&#39; instanceof T(int) // false T() はタイプ（型）を表す</li></ul></li><li>matches (正規表現) <ul><li>ex) &#39;5.00&#39; matches &#39;^[0-9]{2}$&#39; // false</li></ul></li></ul><h3 id="メソッド・フィールドの呼び出し-spel" tabindex="-1">メソッド・フィールドの呼び出し(SpEL) <a class="header-anchor" href="#メソッド・フィールドの呼び出し-spel" aria-label="Permalink to &quot;メソッド・フィールドの呼び出し(SpEL)&quot;">​</a></h3><p>以下のようにメソッド・フィールドの呼び出しができます。</p><ul><li>e.method(args) (メソッドの呼び出し)</li><li>e.property (フィールドの呼び出し)</li><li>T(type).staticMethod(args) (staticメソッドの呼び出し)</li></ul><h2 id="stringfunction-sf" tabindex="-1">StringFunction(SF) <a class="header-anchor" href="#stringfunction-sf" aria-label="Permalink to &quot;StringFunction(SF)&quot;">​</a></h2><p><strong>uroboroSQL</strong>では評価式を利用する際、標準で<code>StringFunction</code>（SF）を使用することができます。 評価式と合わせて<code>StringFunction</code>クラスのメソッドを呼び出すことができます。</p><ul><li>評価式で使用する場合</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*IF SF.isNotEmpty(emp_no)*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  -- emp_noが null または &quot;&quot; でない場合に処理される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*END*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>バインドパラメータと合わせて使用する場合</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emp_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*SF.contains(emp_name)*/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> escape </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- emp_name=Bobの場合、 emp_name like %Bob% escape &#39;$&#39; となる</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>StringFunction</code>が提供するメソッドの一覧</li></ul>`,47)),t("table",p,[l[30]||(l[30]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"メソッド名"),t("th",{style:{"text-align":"left"}},"戻り値"),t("th",{style:{"text-align":"left"}},"説明")])],-1)),t("tbody",null,[l[12]||(l[12]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isEmpty(String str)"),t("td",{style:{"text-align":"left"}},"booean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字であること判定する")],-1)),l[13]||(l[13]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isNotEmpty(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字でないことを判定する")],-1)),l[14]||(l[14]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isBlank(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字、もしくは空白であること判定する")],-1)),l[15]||(l[15]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isNotBlank(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字、もしくは空白でないこと判定する")],-1)),l[16]||(l[16]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.trim(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は結果もnullとなる")],-1)),l[17]||(l[17]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.trimToEmpty(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は空文字となる")],-1)),l[18]||(l[18]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.left(String str, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭から指定した文字数の文字列を取得する")],-1)),l[19]||(l[19]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.right(String str, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の最後から指定した文字数の文字列を取得する")],-1)),l[20]||(l[20]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.mid(String str, int pos, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の指定した位置から指定した文字数の文字列を取得する")],-1)),l[21]||(l[21]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の末尾に空白を埋めて指定された長さにする")],-1)),l[22]||(l[22]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size, char padChar)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の末尾に指定した埋め込み文字を埋めて指定された長さにする")],-1)),l[23]||(l[23]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭に空白を埋めて指定された長さにする")],-1)),l[24]||(l[24]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size, char padChar)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭に指定した埋め込み文字を埋めて指定された長さにする")],-1)),l[25]||(l[25]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を空白で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[26]||(l[26]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str, char separatorChar)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[27]||(l[27]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str, String separatorChars, int max)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[28]||(l[28]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.capitalize(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭文字を大文字にする")],-1)),l[29]||(l[29]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.uncapitalize(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭を小文字にする")],-1)),t("tr",null,[l[4]||(l[4]=t("td",{style:{"text-align":"left"}},"SF.startsWith(CharSequence text)",-1)),l[5]||(l[5]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",u,[l[3]||(l[3]=e("指定されたテキストで始まるLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),t("tr",null,[l[7]||(l[7]=t("td",{style:{"text-align":"left"}},"SF.contains(CharSequence text)",-1)),l[8]||(l[8]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",h,[l[6]||(l[6]=e("指定されたテキストを含むLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),t("tr",null,[l[10]||(l[10]=t("td",{style:{"text-align":"left"}},"SF.endsWith(CharSequence text)",-1)),l[11]||(l[11]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",f,[l[9]||(l[9]=e("指定されたテキストで終わるLIKE句用の検索文字列を生成する。数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])])])])])}const E=a(d,[["render",x]]);export{L as __pageData,E as default};
