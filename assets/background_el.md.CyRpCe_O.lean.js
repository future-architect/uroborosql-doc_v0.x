import{_ as a,C as s,c as r,o,j as t,a2 as g,a as e,G as n}from"./chunks/framework.Dm7eAID-.js";const L=JSON.parse('{"title":"式言語","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"式言語"}],["meta",{"name":"og:url","content":"/uroborosql-doc_v0.x/background/el.html"}]]},"headers":[],"relativePath":"background/el.md","filePath":"background/el.md"}'),d={name:"background/el.md"},p={tabindex:"0"},u={style:{"text-align":"left"}},h={style:{"text-align":"left"}},f={style:{"text-align":"left"}};function x(S,l,y,b,m,k){const i=s("Badge");return o(),r("div",null,[l[31]||(l[31]=t("h1",{id:"式言語",tabindex:"-1"},[e("式言語 "),t("a",{class:"header-anchor",href:"#式言語","aria-label":'Permalink to "式言語"'},"​")],-1)),l[32]||(l[32]=t("p",null,[t("strong",null,"uroboroSQL"),e("では、条件分岐に式言語を利用することができます。"),t("br"),e(" 利用可能な式言語は以下の２つになります。")],-1)),t("ul",null,[l[2]||(l[2]=t("li",null,[t("a",{href:"https://github.com/jkuhnert/ognl",target:"_blank",rel:"noreferrer"},"OGNL")],-1)),t("li",null,[l[0]||(l[0]=t("a",{href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions",target:"_blank",rel:"noreferrer"},"Spring Expression Language(SpEL)",-1)),l[1]||(l[1]=e()),n(i,{text:"0.18.0+"})])]),l[33]||(l[33]=g("",47)),t("table",p,[l[30]||(l[30]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"メソッド名"),t("th",{style:{"text-align":"left"}},"戻り値"),t("th",{style:{"text-align":"left"}},"説明")])],-1)),t("tbody",null,[l[12]||(l[12]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isEmpty(String str)"),t("td",{style:{"text-align":"left"}},"booean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字であること判定する")],-1)),l[13]||(l[13]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isNotEmpty(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字でないことを判定する")],-1)),l[14]||(l[14]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isBlank(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字、もしくは空白であること判定する")],-1)),l[15]||(l[15]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.isNotBlank(String str)"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"対象文字列が空文字、もしくは空白でないこと判定する")],-1)),l[16]||(l[16]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.trim(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は結果もnullとなる")],-1)),l[17]||(l[17]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.trimToEmpty(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は空文字となる")],-1)),l[18]||(l[18]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.left(String str, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭から指定した文字数の文字列を取得する")],-1)),l[19]||(l[19]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.right(String str, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の最後から指定した文字数の文字列を取得する")],-1)),l[20]||(l[20]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.mid(String str, int pos, int len)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の指定した位置から指定した文字数の文字列を取得する")],-1)),l[21]||(l[21]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の末尾に空白を埋めて指定された長さにする")],-1)),l[22]||(l[22]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size, char padChar)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の末尾に指定した埋め込み文字を埋めて指定された長さにする")],-1)),l[23]||(l[23]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭に空白を埋めて指定された長さにする")],-1)),l[24]||(l[24]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size, char padChar)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭に指定した埋め込み文字を埋めて指定された長さにする")],-1)),l[25]||(l[25]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を空白で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[26]||(l[26]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str, char separatorChar)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[27]||(l[27]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.split(String str, String separatorChars, int max)"),t("td",{style:{"text-align":"left"}},"String[]"),t("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),l[28]||(l[28]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.capitalize(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭文字を大文字にする")],-1)),l[29]||(l[29]=t("tr",null,[t("td",{style:{"text-align":"left"}},"SF.uncapitalize(String str)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"文字列の先頭を小文字にする")],-1)),t("tr",null,[l[4]||(l[4]=t("td",{style:{"text-align":"left"}},"SF.startsWith(CharSequence text)",-1)),l[5]||(l[5]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",u,[l[3]||(l[3]=e("指定されたテキストで始まるLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),t("tr",null,[l[7]||(l[7]=t("td",{style:{"text-align":"left"}},"SF.contains(CharSequence text)",-1)),l[8]||(l[8]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",h,[l[6]||(l[6]=e("指定されたテキストを含むLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),t("tr",null,[l[10]||(l[10]=t("td",{style:{"text-align":"left"}},"SF.endsWith(CharSequence text)",-1)),l[11]||(l[11]=t("td",{style:{"text-align":"left"}},"String",-1)),t("td",f,[l[9]||(l[9]=e("指定されたテキストで終わるLIKE句用の検索文字列を生成する。数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])])])])])}const E=a(d,[["render",x]]);export{L as __pageData,E as default};
